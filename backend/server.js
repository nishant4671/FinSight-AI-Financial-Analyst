// backend/server.js
const express = require('express');
const cors = require('cors');
const path = require('path');
const { PDFDocument, StandardFonts, rgb } = require('pdf-lib');
const net = require('net');

// Manual environment loading
const envPath = path.resolve(__dirname, '../.env');
require('dotenv').config({ path: envPath });

const app = express();
const PORT = process.env.PORT || 5000;
const HOST = '0.0.0.0';

// Function to check port availability
const isPortFree = (port) => new Promise((resolve) => {
  const server = net.createServer()
    .once('error', () => resolve(false))
    .once('listening', () => {
      server.close();
      resolve(true);
    })
    .listen(port, HOST);
});

// Start server with port fallback
const startServer = async (desiredPort) => {
  let port = desiredPort;
  let attempts = 0;
  
  while (!await isPortFree(port) && attempts < 5) {
    console.log(`⚠️ Port ${port} is occupied, trying ${port + 1}`);
    port++;
    attempts++;
  }

  app.listen(port, HOST, () => {
    console.log('='.repeat(60));
    console.log('SERVER STARTED SUCCESSFULLY');
    console.log('='.repeat(60));
    console.log(`Environment: ${process.env.NODE_ENV || 'development'}`);
    console.log(`Port: ${port}`);
    console.log(`Alpha Vantage Key: ${process.env.ALPHA_VANTAGE_KEY ? '****' + process.env.ALPHA_VANTAGE_KEY.slice(-4) : 'MISSING'}`);
    console.log(`OpenAI Key: ${process.env.OPENAI_API_KEY ? '****' + process.env.OPENAI_API_KEY.slice(-4) : 'MISSING'}`);
    console.log(`Health Check: http://localhost:${port}/api/health`);
    console.log('='.repeat(60));
  }).on('error', (err) => {
    console.error('❌ Server error:', err.message);
    if (err.code === 'EADDRINUSE') {
      console.log(`💡 Try changing PORT in .env file to ${port + 1}`);
    }
  });
};

// Middleware setup
app.use(cors());
app.use(express.json());

// Health check endpoint
app.get('/api/health', (req, res) => {
  res.status(200).json({ 
    status: 'active', 
    version: '1.0.0',
    environment: process.env.NODE_ENV || 'development'
  });
});

// PDF export endpoint
app.post('/api/export-pdf', async (req, res) => {
  try {
    const { title, content, author = "FinSight AI" } = req.body;
    
    const pdfDoc = await PDFDocument.create();
    const page = pdfDoc.addPage();
    const { width, height } = page.getSize();
    
    page.drawText(title || 'Financial Analysis Report', {
      x: 50,
      y: height - 50,
      size: 18,
      font: await pdfDoc.embedFont(StandardFonts.HelveticaBold),
      color: rgb(0, 0, 0.5),
    });
    
    const date = new Date().toLocaleDateString();
    page.drawText(`Generated by ${author} | ${date}`, {
      x: 50,
      y: height - 80,
      size: 10,
      font: await pdfDoc.embedFont(StandardFonts.Helvetica),
      color: rgb(0.5, 0.5, 0.5),
    });
    
    let y = height - 120;
    const lines = content.split('\n');
    
    for (const line of lines) {
      if (y < 100) {
        pdfDoc.addPage();
        y = height - 50;
      }
      
      page.drawText(line, {
        x: 50,
        y,
        size: 12,
      });
      
      y -= 15;
    }
    
    const pdfBytes = await pdfDoc.save();
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', 'attachment; filename=report.pdf');
    res.send(pdfBytes);
    
  } catch (error) {
    console.error('PDF error:', error);
    res.status(500).json({ error: 'PDF generation failed' });
  }
});

// Production config
if (process.env.NODE_ENV === 'production') {
  const frontendPath = path.join(__dirname, '../frontend/build');
  app.use(express.static(frontendPath));
  
  app.get('*', (req, res) => {
    res.sendFile(path.join(frontendPath, 'index.html'));
  });
}

// Start the server with port management
startServer(PORT);
