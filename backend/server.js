// backend/server.js
require('dotenv').config();
const express = require('express');
const cors = require('cors');
const axios = require('axios');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const { PDFDocument, StandardFonts, rgb } = require('pdf-lib');
const path = require('path');
const { runPythonScript } = require('./pythonBridge');

// Initialize Express application
const app = express();
const PORT = process.env.PORT || 5000;

// Middleware setup
app.use(cors({
  origin: process.env.NODE_ENV === 'production' 
    ? 'https://finsight-ai.onrender.com' 
    : 'http://localhost:3000'
}));
app.use(express.json());

// Initialize Google Gemini
const genAI = process.env.GEMINI_API_KEY 
  ? new GoogleGenerativeAI(process.env.GEMINI_API_KEY)
  : null;

// ==================== API ENDPOINTS ====================

// Health check endpoint
app.get('/api/health', (req, res) => {
  res.status(200).json({ 
    status: 'active', 
    version: '1.0.0',
    environment: process.env.NODE_ENV || 'development'
  });
});

// Stock analysis endpoint
app.post('/api/analyze', async (req, res) => {
  const { symbol } = req.body;
  
  if (!symbol || typeof symbol !== 'string') {
    return res.status(400).json({ error: 'Invalid symbol parameter' });
  }
  
  try {
    console.log(`ðŸ§  Starting analysis for ${symbol}...`);
    
    // Execute Python analysis pipeline
    const result = await runPythonScript(
      '../data_processing/full_analysis.py',
      [symbol]
    );
    
    res.json({
      status: 'success',
      symbol,
      forecastChart: result.forecast_chart,
      sentiment: result.sentiment,
      report: result.report
    });
    
  } catch (error) {
    console.error('ðŸ”¥ Analysis failed:', error.message);
    res.status(500).json({ 
      error: 'Analysis failed', 
      details: error.message 
    });
  }
});

// PDF export endpoint
app.post('/api/export-pdf', async (req, res) => {
  try {
    const { title, content, author = "FinSight AI" } = req.body;
    
    // Create a new PDF document
    const pdfDoc = await PDFDocument.create();
    const page = pdfDoc.addPage();
    const { width, height } = page.getSize();
    
    // Embed fonts
    const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
    const boldFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold);
    
    // Add title
    page.drawText(title || 'Financial Analysis Report', {
      x: 50,
      y: height - 50,
      size: 18,
      font: boldFont,
      color: rgb(0, 0, 0.5),
    });
    
    // Add author and date
    const date = new Date().toLocaleDateString();
    page.drawText(`Generated by ${author} | ${date}`, {
      x: 50,
      y: height - 80,
      size: 10,
      font: font,
      color: rgb(0.5, 0.5, 0.5),
    });
    
    // Add content
    let y = height - 120;
    const lines = content.split('\n');
    const fontSize = 12;
    
    for (const line of lines) {
      if (y < 100) {
        // Add new page
        const newPage = pdfDoc.addPage();
        y = height - 50;
      }
      
      const isSection = line.startsWith('**');
      page.drawText(line.replace(/\*\*/g, ''), {
        x: 50,
        y,
        size: isSection ? 14 : fontSize,
        font: isSection ? boldFont : font,
        color: isSection ? rgb(0.2, 0.2, 0.6) : rgb(0, 0, 0),
      });
      
      y -= (isSection ? 25 : 18);
    }
    
    // Serialize and send
    const pdfBytes = await pdfDoc.save();
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', 'attachment; filename=financial_report.pdf');
    res.send(pdfBytes);
    
  } catch (error) {
    console.error('PDF generation failed:', error);
    res.status(500).json({ error: 'PDF generation failed' });
  }
});

// ==================== PRODUCTION CONFIG ====================

if (process.env.NODE_ENV === 'production') {
  // Serve static frontend build
  app.use(express.static(path.resolve(__dirname, '../frontend/build')));
  
  // Handle React routing
  app.get('*', (req, res) => {
    res.sendFile(path.resolve(__dirname, '../frontend/build/index.html'));
  });
}

// ==================== START SERVER ====================

app.listen(PORT, () => {
  console.log(`ðŸš€ Server running in ${process.env.NODE_ENV || 'development'} mode`);
  console.log(`âœ… Health check: http://localhost:${PORT}/api/health`);
  console.log(`âœ… Frontend: ${process.env.NODE_ENV === 'production' 
    ? 'Serving production build' 
    : 'http://localhost:3000'}`);
});